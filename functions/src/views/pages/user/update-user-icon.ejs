<!DOCTYPE html>
<html>

<head>
  <%- include('../../partials/head'); %>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.6.1/cropper.min.js"
      integrity="sha512-9KkIqdfN7ipEW6B6k+Aq20PV31bjODg4AA52W+tYtAE0jE0kMx49bjJ3FgvS56wzmyfMUHbQ4Km2b7l9+Y/+Eg=="
      crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.6.1/cropper.min.css"
      integrity="sha512-hvNR0F/e2J7zPPfLC9auFe3/SE0yG4aJCOd/qxew74NN7eyiSKjr7xJJMu1Jy2wf7FXITpWS1E/RY8yzuXN7VA=="
      crossorigin="anonymous" referrerpolicy="no-referrer" />
</head>

<body>
  <div class="flex flex-col" style="min-height: 100svh; max-height: 100svh;">
    <%- include('../../partials/header'); %>
      <!-- Main Body -->
      <div class="grow overflow-y-scroll">
        <%- include('../../partials/page-title', {title: 'ユーザアイコン設定' }); %>
          <div class="pt-1 px-1 pb-10">
            <div class="accordion mt-3" id="accordionExample">
              <div class="accordion-item">
                <h2 class="accordion-header">
                  <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse"
                    data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                    <span class="material-symbols-outlined text-accent">
                      warning
                    </span>
                    <span class="text-accent">登録前の注意事項</span>
                  </button>
                </h2>
                <div id="collapseOne" class="accordion-collapse collapse visible" data-bs-parent="#accordionExample">
                  <div class="accordion-body">
                    <ul>
                      <li>後からいつでも変更・削除できます。</li>
                      <li>個人を特定できる情報は書かないこと。</li>
                      <li>公序良俗に反する記載は行わないこと。</li>
                      <li>著作権・肖像権に注意すること。</li>
                    </ul>
                  </div>
                </div>
              </div>
            </div>
            <div class="mt-3">
              <label for="formFile" class="form-label">写真選択</label>
              <input class="form-control" type="file" id="uploadPhoto" name="uploadPhoto" required
                accept=".jpg, .jpeg, .png" />
            </div>
            <p class="mt-1">画像のトリミング</p>
            <div id="cropperTargetDiv" class="w-full" style='height: 200px'>
              <img id="target" src="">
            </div>
            <%- include('../../partials/icon-button', {label: "丸く切り取る", id: "cropButton", googleIconName: "content_cut"}); %>
            <!-- <button id="cropButton" class="btn bg-accent text-white" style="background-color: #ff0099;">
              <span class="material-symbols-outlined align-[-6px]">
                content_cut
              </span>
              丸く切り取る
            </button> -->
            <p class="mt-1">実際の見え方</p>
            <div class="flex justify-center">
              <div>
                大きいサイズ
                <img id='preview1' class="rounded-full w-[110px] h-[110px]" width="110" height="110"
                  style="border: 2px solid #ff0099;">
              </div>
              <div class="ml-1">
                小さいサイズ
                <img id='preview2' class="rounded-full w-[40px] h-[40px]" width="40" height="40"
                  style="border: 2px solid #ff0099;">
              </div>
            </div>
            <%- include('../../partials/icon-button', {label: "初期設定に戻す", id: "useDefaultIconButton", googleIconName: "reset_image"}); %>
            <!-- <button id="useDefaultIconButton" class="btn bg-accent text-white" style="background-color: #ff0099;">
              <span class="material-symbols-outlined align-[-6px]">
                reset_image
              </span>
              初期設定に戻す
            </button> -->
            <img id="defaultIconImg" src="/images/user-icon/kkrn_icon_user_9.svg" class="hidden" />
            <script>
              function getBase64Image(img) {
                var canvas = document.createElement("canvas");
                canvas.width = img.width;
                canvas.height = img.height;
                var ctx = canvas.getContext("2d");
                ctx.drawImage(img, 0, 0);
                var dataURL = canvas.toDataURL("image/png");
                return dataURL.replace(/^data:image\/?[A-z]*;base64,/);
              }

              const useDefaultIconButton = document.getElementById('useDefaultIconButton');
              useDefaultIconButton.addEventListener('click', function (e) {
                // 要素を取得する
                let img = document.getElementById("defaultIconImg");

                //canvas要素を生成
                let cvs = document.createElement('canvas');
                let context = cvs.getContext('2d');
                cvs.width = img.width;
                cvs.height = img.height;

                context.drawImage(img, 0, 0);

                //　mime_typeを指定してBase64化する
                let base64String = cvs.toDataURL("image/png");

                console.log(base64String);

                let preview1 = document.getElementById('preview1');
                // previewにセットする
                preview1.src = base64String;

                let preview2 = document.getElementById('preview2');
                // previewにセットする
                preview2.src = base64String;
              });
            </script>
            <style>
              /* 下記は円形にするなら必須です。 */
              .cropper-view-box,
              .cropper-face {
                border-radius: 50%;
              }
            </style>
            <script>
              const uploadPhotoInput = document.getElementById('uploadPhoto');
              uploadPhotoInput.addEventListener('change', function (e) {
                const file = e.srcElement.files[0];

                const fr = new FileReader();
                fr.addEventListener('load', function () {
                  let url = fr.result;
                  let img = new Image();
                  img.src = url;
                  // そのままだとでかすぎるのでサイズ調整して
                  //img.height = 200;
                  //img.classList.add('h-40');

                  let cropperTargetDiv = document.getElementById('cropperTargetDiv');
                  cropperTargetDiv.innerHTML = '';
                  cropperTargetDiv.appendChild(img);
                  cropper();
                });
                fr.readAsDataURL(file);
              });

              function cropper() {
                //let target = document.getElementById('target');
                let target = document.getElementById('cropperTargetDiv').firstChild;
                const cropper = new Cropper(target, {
                  aspectRatio: 1,
                  viewMode: 1,
                  crop: function (event) {
                    const canvas = cropper.getCroppedCanvas({
                      // width: 100,
                      // height: 100,
                      fillColor: '#000',
                      imageSmoothingEnabled: false,
                      imageSmoothingQuality: 'high',
                    });
                    const roundedCanvas = getRoundedCanvas(canvas);
                    roundedImage.src = roundedCanvas.toDataURL();
                  },
                });

                const cropButton = document.getElementById('cropButton');
                cropButton.addEventListener('click', function () {
                  // トリミングパネル内のcanvasを取得
                  let canvas = cropper.getCroppedCanvas()
                  // canvasをbase64に変換
                  let data = canvas.toDataURL();

                  let preview1 = document.getElementById('preview1');
                  // previewにセットする
                  preview1.src = data;

                  let preview2 = document.getElementById('preview2');
                  // previewにセットする
                  preview2.src = data;
                });
              }
              function getRoundedCanvas(sourceCanvas) {
                const canvas = document.createElement('canvas');
                const context = canvas.getContext('2d');
                const width = sourceCanvas.width;
                const height = sourceCanvas.height;

                canvas.width = width;
                canvas.height = height;
                context.imageSmoothingEnabled = true;
                context.drawImage(sourceCanvas, 0, 0, width, height);
                context.globalCompositeOperation = 'destination-in';
                context.beginPath();
                context.arc(width / 2, height / 2, Math.min(width, height) / 2, 0, 2 * Math.PI, true);
                context.fill();
                return canvas;
              };
            </script>

            <form action="/user/icon/update" method="POST" onSubmit="return confirm('本当に設定してもよろしいですか？')">
              <%- include('../../partials/icon-button', {label: "保存", typeSubmit: true, onSubmitCode: "return confirm('登録してもよろしいですか？');", googleIconName: "person_add"}); %>
              <!-- <button type="submit" class="mt-3 btn text-white w-full bg-accent" style="background-color:#ff0099;"
                onsubmit="return confirm('登録してもよろしいですか？');">
                <span class="material-symbols-outlined align-[-6px]">
                  person_add
                </span>
                決定
              </button> -->
            </form>
          </div>
      </div>
      <%- include('../../partials/footer', {currentMenu: null}); %>
  </div>
</body>

</html>